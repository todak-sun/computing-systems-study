// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
        // zx, nx
        // x에 무엇이 들어오든, zx에 따라 x1을 결정
        Mux16(a=x, b[0..15]=false, sel=zx, out=x1);
        // x1의 반전값을 notx1로
        Not16(in=x1, out=notx1);
        // x1과 notx1 중, nx에 따라 x2를 결정
        Mux16(a=x1, b=notx1, sel=nx, out=x2);

        // zy, ny <- zx, nx와 같음
        Mux16(a=y, sel=zy, out=y1);
        Not16(in=y1, out=noty1);
        Mux16(a=y1, b=noty1, sel=ny, out=y2);

        // f가 무엇인지에 따라, and operation과 add operation의 결과 중 하나를 f의 결과가 된다.
        Add16(a=x2, b=y2, out=addop);
        And16(a=x2, b=y2, out=andop);
        Mux16(a=andop, b=addop, sel=f, out=fret);

        // no, fret을 반전시킨 값을 nfet으로
        Not16(in=fret, out=nfret);
        // fret과 nfret중 무엇을 선택할 지를 no에 맡겨 담는다.
        // 가장 마지막 값을 제외하고 나머지를 반으로 쪼갠다.
        Mux16(a=fret, b=nfret, sel=no, out=out, out[15]=lastbit, out[0..7]=leftout, out[8..15]=rightout);

        // if (output == 0) zr = 1, otherwise zr = 0
        Or8Way(in=leftout, out=zrleft); // 왼쪽에 위치한 비트들을 연속해서 Or 연산한 값을 zrleft로.
        Or8Way(in=rightout, out=zrright); // 오른쪽에 위치한 비트들을 연속해서 Or연산
        Or(a=zrleft, b=zrright, out=nzr); // 위에서 연산한 값들을 또 Or연산
        Not(in=nzr, out=zr); // 반전

        // if(output < 0)  ng = 1, otherwise ng = 0
        And(a=lastbit, b=true, out=ng);
}