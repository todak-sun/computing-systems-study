// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A명령어일 때 [0|n|nnnnnnnnnnnnnn]
    // C명령어일 때 [1|x|x|a|c|c|c|c|c|c|d|d|d|j|j|j]
    //              [5|4|3|2|1|0|9|8|7|6|5|4|3|2|1|0]
    
    
	// A instruction 인지 C instruction인지 확인 후 aType, cType을 set 한다.	
	Not(in=instruction[15], out=aType);
	Not(in=aType, out=cType);
	
	// C instruction일 때 dest0 bit이 1이면 ALU의 result가, 0이면 instruction이 A register에 input된다.
	And(a=cType, b=instruction[5], out=ALUtoA);
	Mux16(a=instruction, b=ALUout, sel=ALUtoA, out=ARegin);
	
	// instruction이 A type이거나 dest0이 1이면 loadA가 1이 되어, A register에 input된 값이 저장된다.
	// 값이 input되더라도 load bit이 set되어야 저장된다
	Or(a=instruction[5], b=aType, out=loadA);
	ARegister(in=ARegin, load=loadA, out=ARegout);
	
	// a bit가 ALU의 Y input에 A register의 값이 들어갈 지 inM이 들어갈 지 결정
	Mux16(a=ARegout, b=inM, sel=instruction[12], out=ALUYin);
	
	// D register
	// instruction이 C type이고 dest1이 1이면 (D register에 값을 저장해야하면) loadD가 1이 되어, D register에 ALUout이 저장된다.
	And(a=cType, b=instruction[4], out=loadD);
	DRegister(in=ALUout, load=loadD, out=DRegout);
	
	// ALU
	// ALU에는 input 2개, 6개의 comp bit, ng, zr, ALUout을 연결
	ALU(x=DRegout, y=ALUYin, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8] , f=instruction[7], no=instruction[6] , out=ALUout, zr=ZRout, ng=NGout);
	
	
	// Jump
	// ALU의 연산 결과로 나온 ng, zr flag를 이용해 pos flag도 만들어둔다.	
	Or(a=NGout, b=ZRout, out=NGZR);
	Not(in=NGZR, out=posi);
	
	// instruction의 3개의 jump bit과 해당 조건을 비교하여 옳은게 있으면 jlt, jeq, jgt에 1을 set한다.
	And(a=instruction[2], b=NGout, out=jlt);
	And(a=instruction[1], b=ZRout, out=jeq);
	And(a=instruction[0], b=posi, out=jgt); 
	
	// instruction이 C type일 때 위 조건 중 하나라도 1이 있으면 (하나라도 조건을 충족했다면 - 범위에 들었다면) jump를 실행한다.
	Or(a=jlt, b=jeq, out=jle);
	Or(a=jle, b=jgt, out=jumpToA);
	And(a=cType, b=jumpToA, out=PCload);
	Not(in=PCload, out=PCinc);
	
	
	// PC
	// PC에는 A Register에 저장되어있던 값을 load하여 jump를 실행한다.
	// jump가 없을때는 단순히 inc bit을 set하여 PC값을 증가시킨다.
	PC(in=ARegout, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);
	
	
	// CPU Outputs
	And(a=cType, b=instruction[3], out=writeM);
	Or16(a=false, b=ARegout, out[0..14]=addressM);
	Or16(a=false, b=ALUout, out=outM); 

}