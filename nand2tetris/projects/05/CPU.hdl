// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A명령어일 때 [0|n|nnnnnnnnnnnnnn]
    // C명령어일 때 [1|x|x|a|c|c|c|c|c|c|d|d|d|j|j|j]
    //              [5|4|3|2|1|0|9|8|7|6|5|4|3|2|1|0]
    // i - 명령어 종류
    // a면 0, c면 1
    // a비트 - 연산 담당
    // c비트 - 연산 구체적인 내용
    // d비트 dest
    // j 비트 jump

    // ARegister - 데이터 레지스터와 주소 레지스터 두 역할
    // DRegister - 데이터 값을 저장하는 용도로 쓰는 레지스터

    // 확인
    Not(in=instruction[15], out=noti);
    Or(a=noti, b=instruction[5], out=aFlag);

    // A명령어라면, input의 주소를 로드하고 C명령어라면 ALU 결과를 로드
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=address);
    ARegister(in=address, load=aFlag, out=registerA, out[0..14]=addressM);

    // a 비트를 보고 연산을 할 것인지, 메모리에 있는걸 꺼내올 것인지 결정
    Mux16(a=registerA, b=inM, sel=instruction[12], out=ALUin);

    ALU(x=registerD, 
        y=ALUin, 
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=insturction[6], 
        out=outM, 
        zr=zr, 
        ng=ng);
    

    


}